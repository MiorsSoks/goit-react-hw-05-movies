{"version":3,"file":"static/js/721.3d5f6467.chunk.js","mappings":"kVAGMA,EAAU,2CACVC,EAAQ,SAAAA,GAAK,OAAIC,QAAQC,IAAI,QAASF,EAAMG,UAI3C,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,IAAAA,IAAA,+BACQN,IAC5BO,MAAMN,GAHJ,cACCO,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACkBN,IAAAA,IAAA,iBACNM,EADM,YACKZ,IACzBO,MAAMN,GAHJ,cACCO,EADD,yBAIEA,EAASC,MAJX,kEAME,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAyBD,GAAzB,uFACgBN,IAAAA,IAAA,iBACNM,EADM,oBACaZ,IACjCO,MAAMN,GAHF,cACDO,EADC,yBAIAA,EAASC,MAJT,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,uFACgBN,IAAAA,IAAA,iBACNM,EADM,oBACaZ,IACjCO,MAAMN,GAHF,cACDO,EADC,yBAIAA,EAASC,KAAKC,SAJd,kEAOE,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,uFACcV,IAAAA,IAAA,wBACCN,EADD,iCACiCgB,EADjC,gCAEpBT,MAAMN,GAHA,cACHO,EADG,yBAIFA,EAASC,KAAKC,SAJZ,kEA9BXJ,IAAAA,SAAAA,QAAyB,+BAsCzBK,EAAaM,UAAY,CACvBL,QAASM,IAAAA,OAAAA,YAGXL,EAAUI,UAAY,CACpBL,QAASM,IAAAA,OAAAA,YAEXJ,EAAaG,UAAY,CACvBL,QAASM,IAAAA,OAAAA,YAEXH,EAAWE,UAAY,CACrBL,QAASM,IAAAA,OAAAA,a,sHClDI,SAASC,IACtB,IAAQP,GAAYQ,EAAAA,EAAAA,MAAZR,QACR,GAAwBS,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,OAJAC,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,GAAUD,GAASa,KAAKF,KACvB,CAACX,KAGF,8BACGU,IACC,0BACE,wBACGA,EAAKA,KAAKI,KAAI,SAAAC,GAAK,OAClB,0BACGA,EAAMC,cACL,gBAAKC,IAfD,kCAeoBF,EAAMC,aAAcE,IAAI,WAEhD,gBAAKD,IAhBL,2DAgBmBC,IAAI,WAEzB,uBAAIH,EAAMI,QACV,uCAAeJ,EAAMK,eAPdL,EAAMM,e,0CCnB7B,UAAed,EAAf","sources":["components/API/Themoviedb-api.jsx","views/Cast/Cast.jsx","views/Cast/index.js"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = \"api_key=b5d359bd4cfe918eaffdc43e2c19ce7b\"\nconst error = error => console.log('Error', error.message)\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n\nexport async function fetchTrendTitles() {\n  const response = await axios\n    .get(`/trending/movie/week?${API_KEY}`)\n    .catch(error);\n  return response.data.results;\n}\n\nexport async function fetchMovieId(movieId) {\n  const response = await axios\n    .get(`/movie/${movieId}?${API_KEY}`)\n    .catch(error);\n  return response.data;\n}\n  export async function fetchCast(movieId) {\n  const response = await axios\n    .get(`/movie/${movieId}/credits?${API_KEY}`)\n    .catch(error);\n  return response.data;\n  }\n\n  export async function fetchReviews(movieId) {\n  const response = await axios\n    .get(`/movie/${movieId}/reviews?${API_KEY}`)\n    .catch(error);\n  return response.data.results;\n  }\n\n    export async function fetchMovie(movie) {\n  const response = await axios\n    .get(`/search/movie?${API_KEY}&language=en-US&query=${movie}&page=1&include_adult=false`)\n    .catch(error);\n  return response.data.results;\n  }\n\n\nfetchMovieId.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nfetchCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n}\nfetchReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\nfetchMovie.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\n","import { fetchCast } from '../../components/API/Themoviedb-api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const basePageUrl = 'https://image.tmdb.org/t/p/w200';\n  const noPhoto = 'https://wvw.db1223.com/images/19015766/icon/12985564.jpg';\n\n  useEffect(() => {\n    fetchCast(movieId).then(setCast);\n  }, [movieId]);\n\n  return (\n    <>\n      {cast && (\n        <div>\n          <ul>\n            {cast.cast.map(actor => (\n              <li key={actor.id}>\n                {actor.profile_path ? (\n                  <img src={basePageUrl + actor.profile_path} alt=\"actor\" />\n                ) : (\n                  <img src={noPhoto} alt=\"actor\" />\n                )}\n                <p>{actor.name}</p>\n                <p>Character: {actor.character}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n}\n","import Cast from './Cast';\nexport default Cast;"],"names":["API_KEY","error","console","log","message","fetchTrendTitles","axios","catch","response","data","results","fetchMovieId","movieId","fetchCast","fetchReviews","fetchMovie","movie","propTypes","PropTypes","Cast","useParams","useState","cast","setCast","useEffect","then","map","actor","profile_path","src","alt","name","character","id"],"sourceRoot":""}